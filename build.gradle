buildscript {
    ext.kotlin_version = '1.2.71'

    repositories {
        mavenLocal()

        if (rootProject.hasProperty('haulmontRepoUrl')) {
            maven {
                url rootProject['haulmontRepoUrl']

                if (rootProject.hasProperty('haulmontRepoUser') && rootProject.hasProperty('haulmontRepoPassword')) {
                    credentials {
                        username rootProject['haulmontRepoUser']
                        password rootProject['haulmontRepoPassword']
                    }
                }
            }
        } else {
            jcenter()
            maven {
                url 'https://repo.cuba-platform.com/content/groups/work'
                credentials {
                    username 'cuba'
                    password 'cuba123'
                }
            }
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

group 'com.haulmont.cli.core'
version rootProject.hasProperty('buildVersion') ? rootProject['buildVersion'] : '1.0-SNAPSHOT'
def isSnapshot = version.endsWith('-SNAPSHOT')

def moduleName = "com.haulmont.cli.core"

def jCommanderVersion = "1.72"
def jansiVersion = "1.17"
def guavaVersion = "26.0-jre"
def jlineVersion = "3.6.2"
def kodeinVersion = "5.0.0"
def gsonVersion = "2.3.1"

apply plugin: 'kotlin'
apply plugin: 'maven'
apply plugin: 'application'

sourceCompatibility = 11
targetCompatibility = 11

repositories {
    mavenLocal()
    if (rootProject.hasProperty('haulmontRepoUrl')) {
        maven {
            url rootProject['haulmontRepoUrl']

            if (rootProject.hasProperty('haulmontRepoUser') && rootProject.hasProperty('haulmontRepoPassword')) {
                credentials {
                    username rootProject['haulmontRepoUser']
                    password rootProject['haulmontRepoPassword']
                }
            }
        }
    } else {
        jcenter()
        maven {
            url 'https://repo.cuba-platform.com/content/groups/work'
            credentials {
                username 'cuba'
                password 'cuba123'
            }
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    implementation "com.beust:jcommander:$jCommanderVersion"
    implementation "org.jline:jline:$jlineVersion"
    implementation "org.fusesource.jansi:jansi:$jansiVersion"

    // Using custom JAR without 'enum' package
    implementation("commons-lang:commons-lang:2.4-cuba.0")
    implementation("commons-collections:commons-collections:3.2.2")

    implementation("com.google.guava:guava:$guavaVersion") {
        exclude(group: 'com.google.code.findbugs', module: 'jsr305')
    }

    implementation("org.kodein.di:kodein-di-generic-jvm:$kodeinVersion") {
        // jlink: org.apache.commons.lang.enum: Invalid package name: 'enum' is not a Java identifier
        exclude(group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib')
    }

    implementation("com.google.code.gson:gson:$gsonVersion")

    implementation("commons-configuration:commons-configuration:1.10") {
        exclude(group: 'commons-lang', module: 'commons-lang')
    }

    implementation("commons-logging:commons-logging:1.1.1'")

    testImplementation group: 'junit', name: 'junit', version: '4.12'
}

configurations {
    deployerJars
    compile {
        exclude(group: 'org.jetbrains', module: 'annotations')
    }
}

[compileKotlin, compileTestKotlin].each {
    it.kotlinOptions.jvmTarget = '1.8'
}

processResources.doLast {
    def buildProperties = new File(project.buildDir, 'resources/main/com/haulmont/cli/core/application.properties')
    buildProperties.text = buildProperties.text.replace('version = DEVELOPMENT', 'version = ' + project.version)
}

compileJava {
    inputs.property("moduleName", moduleName)

    options.compilerArgs = [
            '--module-path', classpath.asPath,
            '--patch-module', 'com.haulmont.cli.core=' + compileKotlin.destinationDir
    ]
}

jar {
    // do not permit duplicates in JAR
    duplicatesStrategy = org.gradle.api.file.DuplicatesStrategy.FAIL
}

// disable automatic building of ZIP and TAR
configurations.archives.artifacts.removeAll {
    it.file =~ 'tar' || it.file =~ 'zip'
}

task sourceJar(type: Jar) {
    from file('src/main/java')
    from file('src/main/kotlin')
    from file('src/main/resources')
    classifier = 'sources'
}

artifacts {
    archives sourceJar
}

task generatePom(group: 'distribution', description: 'Generates POM file for uploading to repository') {
    doLast {
        def mavenPomDir = new File(project.buildDir, 'maven-pom')
        mavenPomDir.mkdirs()

        pom {
            project {
                name 'cli-core'
                description 'CUBA Platform Development Command-Line Interface'
                inceptionYear '2018'
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                organization {
                    name 'CUBA Platform'
                    url 'https://www.cuba-platform.com'
                }
            }
        }.writeTo(new File(mavenPomDir, project.name + '-' + project.version + '.pom'))
    }
}

assemble.dependsOn(generatePom)

def uploadUrl = project.hasProperty('uploadUrl') ? project.uploadUrl : null
def haulmontUploadRepo = System.getenv('HAULMONT_REPOSITORY_UPLOAD_URL')
if (uploadUrl == null && haulmontUploadRepo) {
    if (!haulmontUploadRepo.endsWith('/')) {
        haulmontUploadRepo += '/'
    }
    uploadUrl = haulmontUploadRepo + "${isSnapshot ? 'snapshots' : 'releases'}"
}

def uploadUser = project.hasProperty('uploadUser') ? project.uploadUser :
        System.getenv('HAULMONT_REPOSITORY_USER')
def uploadPassword = project.hasProperty('uploadPassword') ? project.uploadPassword :
        System.getenv('HAULMONT_REPOSITORY_PASSWORD')

uploadArchives.configure {
    repositories.mavenDeployer {
        name = 'httpDeployer'
        configuration = configurations.deployerJars
        repository(url: uploadUrl) {
            authentication(userName: uploadUser, password: uploadPassword)
        }
    }
}